#include "mode.h"
#include "data.h"

const int MN = 100010,PINF = 0x7f7f7f7f;

int n,a[MN],b[MN],c[MN],d[MN],s[MN],tot;

int ltr[MN*4],rtr[MN*4],inf1[MN*4],inf2[MN*4];

#define LEF(_t) ltr[_t]

#define RIG(_t) rtr[_t]

int build(TREE)
{
 if(!_t) _t = ++tot;
 if(_l == _r)
 {inf1[_t] = a[_l];inf2[_t] = c[_l];return _t;}
 M;
 LEF(_t) = build(LEFT);
 RIG(_t) = build(RIGHT);
 inf1[_t] = max(inf1[LEF(_t)],inf1[RIG(_t)]);
 inf2[_t] = min(inf2[LEF(_t)],inf2[RIG(_t)]);
 return _t;
}

int gmax(TREE,int l,int r)
{
 if(_l == l && _r == r)
  return inf1[_t];
 M;
 if(l> mid)
  return gmax(RIGHT,l,r);
 else if(r <= mid)
  return gmax(LEFT,l,r);
 else 
  return max(gmax(LEFT,l,mid),gmax(RIGHT,mid+1,r));
}

int gmin(TREE,int l,int r)
{
 if(_l == l && _r == r)
  return inf2[_t];
 M;
 if(l> mid)
  return gmin(RIGHT,l,r);
 else if(r <= mid)
  return gmin(LEFT,l,r);
 else 
  return min(gmin(LEFT,l,mid),gmin(RIGHT,mid+1,r));

}

int main(int argc, char *argv[])
{
    setIO("sample");
    n = gi;
    tot = 1;
    CLEAR(b,0x7f);CLEAR(d,0x7f);
    for(int i = 1;i<=n;++i)
     a[i] = gi;
    for(int i = n;i>=1;--i)
     if(a[i] == 1) b[i] = i;
     else b[i] = b[i+1];
    for(int i = 1;i<=n;++i) s[i] = s[i-1]+a[i];
    for(int i = n;i>=1;--i)
     c[i] = d[a[i]],d[a[i]] = i;
    int ans = 0;
    build(1,1,n);
    for(int i = 1;i<=n;++i)
     if(b[i] != PINF)
     {
      int len = gmax(1,1,n,i,b[i]);
      int k = i+len-1;
      int uu = gmin(1,1,n,i,k);
      if(uu > k)
       if((s[k]-s[i-1]) == (len*(len+1))/2)
        ans = max(ans,len);
     }
    printf("%d\n",ans);
    closeIO();
    return EXIT_SUCCESS;
}
