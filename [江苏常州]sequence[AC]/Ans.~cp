#include "mode.h"
#include "mathlab.h"
/*
定理1.答案不会超过10^9
证明:
不妨设答案是x ,x >= 10^9
对于[x,x+k] ,k属于[0,100000-1]的数按照题目要求做
不难发现:
x取遍[10^9,+oo)内的数都不会是最优解。
原因:k<=10^6 对于极限解：即数列b全是同一个数，最优解不会超过10^9 
一个序列b能被剖分成m块连续相同的，但是1<=i<=m |p[i]| <= 10^6 ,p[i]表示连续的第i段,故答案不会超过10^9 
*/ 
#undef INF
#define INF 102345678900000LL
#define N 100000
int ma[N][20][20];
long long best = INF;
int a[18]; 
int n,b[N];
void check(int m)
{
 long long ret = 0;
 for(int i = m;i>=0;--i)
  ret = ret *10+a[i];
 if(ret < best) best = ret;
}

void dfs(int x,int y,bool z)
{
     int d,ny,nz;
     
     if(y == 1)
     {
      explain("分析需要数字在最后时的情况")
      int dd = x;
      explain("分析需要1~9中那些数字")
      for(int i = 9;i>=1;--i)
       if(ma[0][i][x])
        a[dd] = i,++dd;
      explain("当需要数字0时")
      if(ma[0][0][x])
      {
       explain("交换数位,即让数组a出现数字0")
       if(dd <= x) a[dd] = 1,++dd;
       a[dd] = a[dd-1],a[dd-1] = 0,++dd;
      }
      if(dd == 0 || (x == dd && z))
       a[dd] = 1,++dd;
      check(dd-1);
     }
     else if(y == 2)
     {
      explain("分析需要数字在最后第二位时的情况")
      for(int j = 0;j<=9;++j)
      {
       a[x] = j;
       d = j;
       ny = 0;nz = false;
       explain("判断是否需要0");
       if(j == 0 && ma[0][0][x] == 1) nz = true;
       for(int k = 0;k<=9;++k) ma[ny][k][x+1] = 0;
       for(int i = 0;i<y;++i)
       {
        for(int k = 0;k<=9;++k)
         if(ma[i][k][x] && k != d)
          ma[ny][k][x+1] = 1;
        d = (d+1)%10;
       }
       dfs(x+1,1,nz);
      }
      //j == 9;
      /*a[x] = 9;
      for(int j = 0;j<9;++j)
      {
       a[x+1] = j;
       d = j;
       ny = 0;nz = false;
       if(j == 0 && ma[0][0][x] == 1) nz = true;
       for(int k = 0;k<=9;++k) ma[ny][k][x+2] = 0;
       for(int i = 0;i<y;++i)
       {
        for(int k = 0;k<=9;++k)
         if(ma[i][k][x] && (k != d) && (k != (9+i)%10) )
          ma[ny][k][x+2] = 1;
        d = (d+1)%10;
       }
       dfs(x+2,1,nz);
      }*/
     }
     else
     {
      explain("分析需要数字在最后其他位时的情况") 
      for(int j = 0;j<=9;++j)
      {
       a[x] = j;
       d = j;
       ny = 0;
       nz = false;
       explain("判断是否需要0");
       if(j == 0 && ma[0][0][x] == 1) nz = true; 
       for(int k = 0;k<=9;++k) ma[ny][k][x+1] = 0;
       explain("假设d为最后一位,对于相邻y个数字判断能否消除")
       for(int i = 0;i<y;++i)
       {
        for(int k = 0;k<=9;++k)
         if(ma[i][k][x] && k != d)
          ma[ny][k][x+1] = 1;
        d = (d+1)%10;
        explain("当且仅当d变成0时，新长度可以增加")
        iff(d == 0 && i < y-1)
        {
         ++ny;
         for(int k = 0;k<10;++k) ma[ny][k][x+1] = 0;
        }
       }
       dfs(x+1,ny+1,nz);
      }
     
     }
}

long long gans()
{
 for(int i = 0 ;i<n;++i)
 {
  for(int j = 0;j<10;++j) ma[i][j][0] = 0;
  ma[i][b[i]][0] = 1;
 }
dfs(0,n,true);
return best;
}

int main(int argc, char *argv[])
{
    setIO("sample");
    n = gi;
    for(int i = 0;i<n;++i) b[i] = gi;
    printf(I64D,gans());
    closeIO();
    return EXIT_SUCCESS;
}
