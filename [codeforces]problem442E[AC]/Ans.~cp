#include "mode.h"
#include "mathlab.h"
#define MN 1010
const double eps = 1e-9;
int sgn(const double & x){
 if(x < -eps) return -1;
 else if(x > eps) return 1;
 return 0;
}
#define  x X
#define  y Y
typedef pair<double,double> pdd;
int n;
double w,h;
pdd po[MN];
int curCov;
int eve_n;
double eveA[(MN+8)*2];
int eveId[(MN+8)*2];
void nA(double & a){
 while(a < -PI) a += 2*PI;
 while(a > PI) a -= 2*PI;
}
void add(double l, double r){
 nA(l);nA(r);
 eveA[eve_n++] = l,eveA[eve_n++] = r;
 if(l>r)
  curCov++;
}
inline bool lesseveid(const int & i,const int & j)
{
 if(sgn(eveA[i]-eveA[j]) != 0)
  return eveA[i]<eveA[j];
 return (i&1)<(j&1);
}
bool check(int p,double r){
 if(sgn(r) == 0) return true;
 curCov = 0;
 eve_n = 0;
 pdd o = po[p];
 if(r > o.x){
  double th = acos(o.x/r);
  add(-PI-th,-PI+th);
  add(-PI-th,-PI+th);
 }
 if(r > w-o.x){
  double th = acos((w-o.x)/r);
  add(-th,th);
  add(-th,th);
 }
 if(r > o.y){
  double th = acos(o.y/r);
  add(-PI/2.0-th,-PI/2.0+th);
  add(-PI/2.0-th,-PI/2.0+th);
 }
 if(r > h-o.y){
  double th = acos((h-o.y)/r);
  add(PI/2.0-th,PI/2+th);
  add(PI/2.0-th,PI/2+th);
 }
 for(int i = 0;i<n;++i)
  if(i != p)
  {
   
  }
}
int main(int argc, char *argv[])
{
    setIO("sample");
    
    closeIO();
    return EXIT_SUCCESS;
}
